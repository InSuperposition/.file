#!/bin/bash
# SSH Certificate Renewal Script
# Renews SSH certificates before they expire

set -euo pipefail

# Configuration
CA_DIR="$HOME/.ssh/ca"
USERNAME="${USER:-$(whoami)}"
CERT_PATH="$HOME/.ssh/id_ed25519-cert.pub"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

check_certificate_expiry() {
    if [[ ! -f "$CERT_PATH" ]]; then
        log_error "Certificate not found: $CERT_PATH"
        return 2
    fi
    
    # Get certificate expiry information
    local cert_info=$(ssh-keygen -L -f "$CERT_PATH" 2>/dev/null || echo "")
    
    if [[ -z "$cert_info" ]]; then
        log_error "Unable to read certificate information"
        return 2
    fi
    
    # Extract expiry date
    local valid_line=$(echo "$cert_info" | grep "Valid:" || echo "")
    if [[ -z "$valid_line" ]]; then
        log_error "Unable to extract certificate validity period"
        return 2
    fi
    
    log_info "Certificate validity: $valid_line"
    
    # Check if certificate expires within 7 days
    local expiry_date=$(echo "$valid_line" | sed -n 's/.*to \([0-9T:-]*\).*/\1/p')
    if [[ -z "$expiry_date" ]]; then
        log_error "Unable to parse expiry date"
        return 2
    fi
    
    # Convert to timestamp (assuming UTC)
    local expiry_ts=$(date -j -f "%Y-%m-%dT%H:%M:%S" "$expiry_date" "+%s" 2>/dev/null || echo "0")
    local current_ts=$(date "+%s")
    local days_remaining=$(( (expiry_ts - current_ts) / 86400 ))
    
    log_info "Certificate expires in $days_remaining days"
    
    if [[ $days_remaining -le 7 ]]; then
        log_warn "Certificate expires in $days_remaining days - renewal needed"
        return 1
    else
        log_info "Certificate is valid for $days_remaining days - no renewal needed"
        return 0
    fi
}

backup_certificate() {
    log_info "Backing up current certificate..."
    local backup_path="$CERT_PATH.backup.$(date +%Y%m%d_%H%M%S)"
    cp "$CERT_PATH" "$backup_path"
    log_info "Certificate backed up to: $backup_path"
}

renew_certificate() {
    log_info "Renewing user certificate..."
    
    if [[ ! -f "$CA_DIR/ssh_ca" ]]; then
        log_error "CA private key not found: $CA_DIR/ssh_ca"
        return 1
    fi
    
    if [[ ! -f "$HOME/.ssh/id_ed25519.pub" ]]; then
        log_error "User public key not found: $HOME/.ssh/id_ed25519.pub"
        return 1
    fi
    
    # Generate new certificate valid for 1 year
    ssh-keygen -s "$CA_DIR/ssh_ca" -I "$USERNAME-macbook-renewed" -n "$USERNAME" \
        -V +52w "$HOME/.ssh/id_ed25519.pub"
    
    log_info "Certificate renewed successfully"
}

verify_renewal() {
    log_info "Verifying renewed certificate..."
    
    # Check certificate validity
    if ssh-keygen -L -f "$CERT_PATH" >/dev/null 2>&1; then
        local cert_info=$(ssh-keygen -L -f "$CERT_PATH")
        local valid_line=$(echo "$cert_info" | grep "Valid:" || echo "")
        log_info "New certificate validity: $valid_line"
        
        # Test connection
        if ssh -o ConnectTimeout=5 -p 2222 localhost echo "SSH test successful" 2>/dev/null; then
            log_info "SSH connection test successful with renewed certificate"
            return 0
        else
            log_warn "SSH connection test failed with renewed certificate"
            return 1
        fi
    else
        log_error "Renewed certificate is invalid"
        return 1
    fi
}

main() {
    log_info "Starting SSH certificate renewal check..."
    
    case "${1:-check}" in
        "check")
            check_certificate_expiry
            case $? in
                0)
                    log_info "Certificate is valid - no action needed"
                    ;;
                1)
                    log_warn "Certificate needs renewal"
                    read -p "Renew certificate now? (y/N): " -n 1 -r
                    echo
                    if [[ $REPLY =~ ^[Yy]$ ]]; then
                        backup_certificate
                        renew_certificate
                        verify_renewal
                    fi
                    ;;
                2)
                    log_error "Certificate check failed"
                    exit 1
                    ;;
            esac
            ;;
        "force")
            log_info "Forcing certificate renewal..."
            if [[ -f "$CERT_PATH" ]]; then
                backup_certificate
            fi
            renew_certificate
            verify_renewal
            ;;
        "status")
            check_certificate_expiry
            ;;
        *)
            echo "Usage: $0 [check|force|status]"
            echo "  check  - Check certificate expiry and prompt for renewal if needed (default)"
            echo "  force  - Force certificate renewal"
            echo "  status - Show certificate status only"
            exit 1
            ;;
    esac
    
    log_info "Certificate renewal process complete"
}

main "$@"