#!/bin/bash
# Firewall Management Script for macOS pf
# Manages firewall rules for SSH remote access

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

show_status() {
    log_info "Firewall status:"
    
    # Check if pf is enabled
    if sudo pfctl -s info 2>/dev/null | grep -q "Status: Enabled"; then
        echo "  ✓ pf firewall: Enabled"
    else
        echo "  ✗ pf firewall: Disabled"
    fi
    
    # Check SSH rate limit rules
    if sudo pfctl -s rules 2>/dev/null | grep -q "2222"; then
        echo "  ✓ SSH rate limiting: Active"
    else
        echo "  ✗ SSH rate limiting: Not configured"
    fi
    
    # Show blocked IPs
    local blocked_count=$(sudo pfctl -t ssh_bruteforce -T show 2>/dev/null | wc -l | tr -d ' ')
    if [[ "$blocked_count" -eq 0 ]]; then
        echo "  ✓ Blocked IPs: None"
    else
        echo "  ⚠ Blocked IPs: $blocked_count"
        log_info "Use 'sudo pfctl -t ssh_bruteforce -T show' to view blocked IPs"
    fi
    
    # Check Mosh ports
    if sudo pfctl -s rules 2>/dev/null | grep -q "60000:61000"; then
        echo "  ✓ Mosh UDP ports: Allowed"
    else
        echo "  ✗ Mosh UDP ports: Not configured"
    fi
}

enable_firewall() {
    log_info "Enabling pf firewall..."
    
    # Check if anchor exists
    if ! sudo grep -q "anchor \"ssh-rate-limit\"" /etc/pf.conf; then
        log_error "SSH rate limiting anchor not found in /etc/pf.conf"
        log_info "Run setup_security first to configure firewall rules"
        return 1
    fi
    
    # Enable pf
    sudo pfctl -e -f /etc/pf.conf
    log_info "pf firewall enabled"
}

disable_firewall() {
    log_warn "Disabling pf firewall..."
    sudo pfctl -d
    log_info "pf firewall disabled"
}

reload_rules() {
    log_info "Reloading firewall rules..."
    sudo pfctl -f /etc/pf.conf
    log_info "Firewall rules reloaded"
}

show_rules() {
    log_info "Current firewall rules:"
    sudo pfctl -s rules | grep -E "(2222|60000|ssh_bruteforce)" || log_info "No SSH-related rules found"
}

show_blocked_ips() {
    log_info "Blocked IP addresses:"
    local blocked_ips=$(sudo pfctl -t ssh_bruteforce -T show 2>/dev/null || echo "")
    
    if [[ -z "$blocked_ips" ]]; then
        log_info "No IPs currently blocked"
    else
        echo "$blocked_ips"
        echo ""
        log_info "Total blocked IPs: $(echo "$blocked_ips" | wc -l | tr -d ' ')"
    fi
}

unblock_ip() {
    if [[ -z "$1" ]]; then
        log_error "IP address required"
        echo "Usage: $0 unblock <ip_address>"
        return 1
    fi
    
    local ip="$1"
    log_info "Unblocking IP: $ip"
    
    if sudo pfctl -t ssh_bruteforce -T delete "$ip" 2>/dev/null; then
        log_info "IP $ip unblocked successfully"
    else
        log_error "Failed to unblock IP $ip (may not be in table)"
    fi
}

clear_blocked_ips() {
    log_warn "Clearing all blocked IPs..."
    read -p "Are you sure? (y/N): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        sudo pfctl -t ssh_bruteforce -T flush
        log_info "All blocked IPs cleared"
    else
        log_info "Operation cancelled"
    fi
}

test_rules() {
    log_info "Testing firewall rules..."
    
    # Test SSH port
    if nc -z localhost 2222 2>/dev/null; then
        log_info "✓ SSH port 2222 is accessible"
    else
        log_warn "✗ SSH port 2222 is not accessible"
    fi
    
    # Test if we can connect to ourselves
    if ssh -o ConnectTimeout=5 -p 2222 localhost echo "Firewall test successful" 2>/dev/null; then
        log_info "✓ SSH connection through firewall successful"
    else
        log_warn "✗ SSH connection through firewall failed"
    fi
}

add_whitelist_ip() {
    if [[ -z "$1" ]]; then
        log_error "IP address required"
        echo "Usage: $0 whitelist <ip_address>"
        return 1
    fi
    
    local ip="$1"
    log_info "Adding IP to whitelist: $ip"
    
    if ! grep -q "$ip" /usr/local/etc/sshguard.whitelist 2>/dev/null; then
        echo "$ip" | sudo tee -a /usr/local/etc/sshguard.whitelist > /dev/null
        log_info "IP $ip added to whitelist"
        
        # Restart sshguard to reload whitelist
        if brew services list | grep -q "sshguard.*started"; then
            log_info "Restarting SSHGuard to reload whitelist..."
            brew services restart sshguard
        fi
    else
        log_info "IP $ip already in whitelist"
    fi
}

show_help() {
    echo "Firewall Management Script"
    echo ""
    echo "Usage: $0 <command> [arguments]"
    echo ""
    echo "Commands:"
    echo "  status              - Show firewall status"
    echo "  enable              - Enable pf firewall"
    echo "  disable             - Disable pf firewall"
    echo "  reload              - Reload firewall rules"
    echo "  rules               - Show current rules"
    echo "  blocked             - Show blocked IP addresses"
    echo "  unblock <ip>        - Unblock specific IP address"
    echo "  clear               - Clear all blocked IPs"
    echo "  whitelist <ip>      - Add IP to whitelist"
    echo "  test                - Test firewall rules"
    echo "  help                - Show this help"
    echo ""
    echo "Examples:"
    echo "  $0 status           # Check firewall status"
    echo "  $0 unblock 1.2.3.4  # Unblock specific IP"
    echo "  $0 whitelist 10.0.0.10  # Add IP to whitelist"
}

main() {
    case "${1:-status}" in
        "status")
            show_status
            ;;
        "enable")
            enable_firewall
            ;;
        "disable")
            disable_firewall
            ;;
        "reload")
            reload_rules
            ;;
        "rules")
            show_rules
            ;;
        "blocked")
            show_blocked_ips
            ;;
        "unblock")
            unblock_ip "$2"
            ;;
        "clear")
            clear_blocked_ips
            ;;
        "whitelist")
            add_whitelist_ip "$2"
            ;;
        "test")
            test_rules
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            log_error "Unknown command: $1"
            show_help
            exit 1
            ;;
    esac
}

main "$@"