#!/bin/bash
# Enhanced Remote Access Health Check Script
# Comprehensive monitoring for SSH, Zellij, and security services

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_section() {
    echo -e "\n${BLUE}=== $1 ===${NC}"
}

check_ssh_service() {
    log_section "SSH Service Status"
    
    # Check if SSH is enabled
    if sudo launchctl list | grep -q ssh 2>/dev/null; then
        echo "  ✓ SSH service is running"
    else
        echo "  ✗ SSH service is not running"
        log_warn "Enable with: sudo systemsetup -setremotelogin on"
        return 1
    fi
    
    # Check SSH configuration
    if [[ -f /etc/ssh/sshd_config.d/99_custom.conf ]]; then
        echo "  ✓ Custom SSH configuration exists"
        
        # Check if port 2222 is configured
        if grep -q "Port 2222" /etc/ssh/sshd_config.d/99_custom.conf 2>/dev/null; then
            echo "  ✓ SSH port 2222 configured"
        else
            echo "  ✗ SSH port 2222 not configured"
        fi
    else
        echo "  ✗ Custom SSH configuration missing"
        log_warn "Run: ~/.local/bin/setup_ssh"
    fi
    
    # Check if port 2222 is listening
    if lsof -i :2222 >/dev/null 2>&1; then
        echo "  ✓ SSH port 2222 is listening"
    else
        echo "  ✗ SSH port 2222 is not listening"
    fi
    
    return 0
}

check_certificates() {
    log_section "SSH Certificate Status"
    
    # Check CA directory
    if [[ -d "$HOME/.ssh/ca" ]]; then
        echo "  ✓ CA directory exists"
    else
        echo "  ✗ CA directory missing"
        return 1
    fi
    
    # Check CA private key
    if [[ -f "$HOME/.ssh/ca/ssh_ca" ]]; then
        echo "  ✓ CA private key exists"
    else
        echo "  ✗ CA private key missing"
    fi
    
    # Check user certificate
    if [[ -f "$HOME/.ssh/id_ed25519-cert.pub" ]]; then
        echo "  ✓ User certificate exists"
        
        # Check certificate validity
        local cert_info=$(ssh-keygen -L -f "$HOME/.ssh/id_ed25519-cert.pub" 2>/dev/null || echo "")
        if [[ -n "$cert_info" ]]; then
            local valid_line=$(echo "$cert_info" | grep "Valid:" || echo "")
            if [[ -n "$valid_line" ]]; then
                echo "  ✓ Certificate is valid"
                echo "    $valid_line"
                
                # Check expiry
                local expiry_date=$(echo "$valid_line" | sed -n 's/.*to \([0-9T:-]*\).*/\1/p')
                if [[ -n "$expiry_date" ]]; then
                    local expiry_ts=$(date -j -f "%Y-%m-%dT%H:%M:%S" "$expiry_date" "+%s" 2>/dev/null || echo "0")
                    local current_ts=$(date "+%s")
                    local days_remaining=$(( (expiry_ts - current_ts) / 86400 ))
                    
                    if [[ $days_remaining -le 7 ]]; then
                        echo "  ⚠ Certificate expires in $days_remaining days"
                        log_warn "Run: ~/.local/bin/renew_ssh_cert"
                    else
                        echo "  ✓ Certificate valid for $days_remaining days"
                    fi
                fi
            else
                echo "  ✗ Cannot read certificate validity"
            fi
        else
            echo "  ✗ Certificate is invalid"
        fi
    else
        echo "  ✗ User certificate missing"
    fi
    
    # Check trusted CA keys
    if [[ -f /etc/ssh/trusted_user_ca_keys ]]; then
        echo "  ✓ Trusted CA keys installed"
    else
        echo "  ✗ Trusted CA keys missing"
    fi
    
    return 0
}

check_zellij() {
    log_section "Zellij Status"
    
    # Check if Zellij is available
    if command -v zellij &> /dev/null; then
        local zellij_version=$(zellij --version 2>/dev/null | head -1 || echo "unknown")
        echo "  ✓ Zellij is available ($zellij_version)"
    else
        echo "  ✗ Zellij is not available"
        return 1
    fi
    
    # Check Zellij configuration
    if [[ -f "$HOME/.config/zellij/config.kdl" ]]; then
        echo "  ✓ Zellij configuration exists"
    else
        echo "  ✗ Zellij configuration missing"
    fi
    
    # Check Zellij layouts
    local layout_count=$(find "$HOME/.config/zellij/layouts" -name "*.kdl" 2>/dev/null | wc -l | tr -d ' ')
    if [[ $layout_count -gt 0 ]]; then
        echo "  ✓ Zellij layouts available ($layout_count)"
    else
        echo "  ✗ No Zellij layouts found"
    fi
    
    # Check active sessions
    local sessions=$(zellij list-sessions 2>/dev/null || echo "")
    if [[ -n "$sessions" ]]; then
        local session_count=$(echo "$sessions" | wc -l | tr -d ' ')
        echo "  ✓ Active Zellij sessions ($session_count):"
        echo "$sessions" | sed 's/^/    /'
    else
        echo "  ✓ No active Zellij sessions"
    fi
    
    return 0
}

check_security() {
    log_section "Security Services"
    
    # Check SSHGuard
    if pgrep sshguard > /dev/null; then
        echo "  ✓ SSHGuard is running"
    else
        echo "  ✗ SSHGuard is not running"
        log_warn "Start with: brew services start sshguard"
    fi
    
    # Check pf firewall
    if sudo pfctl -s info 2>/dev/null | grep -q "Status: Enabled"; then
        echo "  ✓ pf firewall is enabled"
        
        # Check SSH rate limiting rules
        if sudo pfctl -s rules 2>/dev/null | grep -q "2222"; then
            echo "  ✓ SSH rate limiting is active"
        else
            echo "  ✗ SSH rate limiting not configured"
        fi
    else
        echo "  ✗ pf firewall is disabled"
        log_warn "Enable with: sudo ~/.local/bin/setup_firewall enable"
    fi
    
    # Check blocked IPs
    local blocked_count=$(sudo pfctl -t ssh_bruteforce -T show 2>/dev/null | wc -l | tr -d ' ')
    if [[ $blocked_count -eq 0 ]]; then
        echo "  ✓ No blocked IPs (clean slate)"
    else
        echo "  ⚠ $blocked_count IPs currently blocked"
        log_info "Use 'sudo pfctl -t ssh_bruteforce -T show' to view"
    fi
    
    # Check SOPS
    if command -v sops &> /dev/null; then
        echo "  ✓ SOPS is available"
        
        if [[ -f "$HOME/.config/sops/age/keys.txt" ]]; then
            echo "  ✓ SOPS encryption key exists"
        else
            echo "  ✗ SOPS encryption key missing"
        fi
    else
        echo "  ✗ SOPS is not available"
        log_warn "Install with: brew install sops age"
    fi
    
    return 0
}

check_network() {
    log_section "Network Configuration"
    
    # Get IP addresses
    local ips=$(ifconfig | grep "inet " | grep -v "127.0.0.1" | awk '{print $2}')
    if [[ -n "$ips" ]]; then
        echo "  ✓ Network interfaces:"
        echo "$ips" | sed 's/^/    /'
    else
        echo "  ✗ No network interfaces found"
    fi
    
    # Check Mosh
    if command -v mosh &> /dev/null; then
        echo "  ✓ Mosh is available"
        
        # Check if Mosh UDP ports are accessible
        if sudo pfctl -s rules 2>/dev/null | grep -q "60000:61000"; then
            echo "  ✓ Mosh UDP ports configured"
        else
            echo "  ✗ Mosh UDP ports not configured"
        fi
    else
        echo "  ✗ Mosh is not available"
        log_warn "Install with: brew install mosh"
    fi
    
    return 0
}

check_services() {
    log_section "System Services"
    
    # Check SSH keepalive service
    if launchctl list | grep -q "com.user.ssh_keepalive"; then
        echo "  ✓ SSH keepalive service loaded"
    else
        echo "  ✗ SSH keepalive service not loaded"
        log_warn "Load with: ~/.local/bin/setup_service load"
    fi
    
    # Check Zellij restore service
    if launchctl list | grep -q "com.user.zellij_restore"; then
        echo "  ✓ Zellij restore service loaded"
    else
        echo "  ✗ Zellij restore service not loaded"
        log_warn "Load with: ~/.local/bin/setup_service load"
    fi
    
    return 0
}

test_connections() {
    log_section "Connection Tests"
    
    # Test local SSH connection
    if ssh -o ConnectTimeout=5 -p 2222 localhost echo "SSH test successful" 2>/dev/null; then
        echo "  ✓ Local SSH connection successful"
    else
        echo "  ✗ Local SSH connection failed"
        log_warn "Check SSH service and certificates"
    fi
    
    # Test Zellij session creation
    if zellij --session healthcheck --detached echo "Test session" 2>/dev/null; then
        echo "  ✓ Zellij session creation successful"
        zellij kill-session healthcheck 2>/dev/null || true
    else
        echo "  ✗ Zellij session creation failed"
    fi
    
    # Test SSH with Zellij
    if ssh -o ConnectTimeout=5 -p 2222 localhost -t "zellij --session test-remote --detached; zellij kill-session test-remote" 2>/dev/null; then
        echo "  ✓ SSH + Zellij integration successful"
    else
        echo "  ✗ SSH + Zellij integration failed"
    fi
    
    return 0
}

show_summary() {
    log_section "Health Summary"
    
    local total_checks=7
    local passed_checks=0
    
    # Count successful checks (simplified)
    if sudo launchctl list | grep -q ssh 2>/dev/null; then
        passed_checks=$((passed_checks + 1))
    fi
    
    if [[ -f "$HOME/.ssh/id_ed25519-cert.pub" ]]; then
        passed_checks=$((passed_checks + 1))
    fi
    
    if command -v zellij &> /dev/null; then
        passed_checks=$((passed_checks + 1))
    fi
    
    if pgrep sshguard > /dev/null; then
        passed_checks=$((passed_checks + 1))
    fi
    
    if sudo pfctl -s info 2>/dev/null | grep -q "Status: Enabled"; then
        passed_checks=$((passed_checks + 1))
    fi
    
    if command -v mosh &> /dev/null; then
        passed_checks=$((passed_checks + 1))
    fi
    
    if ssh -o ConnectTimeout=5 -p 2222 localhost echo "test" 2>/dev/null; then
        passed_checks=$((passed_checks + 1))
    fi
    
    local health_percentage=$(( passed_checks * 100 / total_checks ))
    
    echo "  Health Score: $passed_checks/$total_checks ($health_percentage%)"
    
    if [[ $passed_checks -eq $total_checks ]]; then
        echo "  🎉 System is ready for iPhone remote access!"
    elif [[ $health_percentage -ge 80 ]]; then
        echo "  ✅ System is mostly ready - minor issues to resolve"
    elif [[ $health_percentage -ge 60 ]]; then
        echo "  ⚠️  System needs attention - several issues to resolve"
    else
        echo "  ❌ System needs significant work before iPhone access"
    fi
    
    echo ""
    log_info "Next steps:"
    
    if [[ ! -f "$HOME/.ssh/id_ed25519-cert.pub" ]]; then
        echo "  1. Run: ~/.local/bin/setup_ssh"
    fi
    
    if ! pgrep sshguard > /dev/null; then
        echo "  2. Run: ~/.local/bin/setup_security"
    fi
    
    if ! launchctl list | grep -q "com.user.ssh_keepalive"; then
        echo "  3. Run: ~/.local/bin/setup_service install"
    fi
    
    echo "  4. Run: ~/.local/bin/generate_qr_config all"
    echo "  5. Configure iPhone SSH client with certificates"
}

main() {
    log_info "Remote Access Health Check"
    log_info "Date: $(date)"
    
    check_ssh_service
    check_certificates
    check_zellij
    check_security
    check_network
    check_services
    test_connections
    show_summary
    
    echo ""
    log_info "Health check complete!"
    log_info "For detailed logs, check: ~/.local/bin/setup_service logs"
}

main "$@"