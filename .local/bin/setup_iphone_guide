#!/bin/bash
# Interactive iPhone Setup Guide
# Step-by-step guide for configuring iPhone terminal access

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_step() {
    echo -e "\n${BLUE}=== $1 ===${NC}"
}

log_substep() {
    echo -e "${CYAN}--- $1 ---${NC}"
}

wait_for_user() {
    echo -e "\n${MAGENTA}Press Enter to continue...${NC}"
    read -r
}

check_prerequisites() {
    log_step "Checking Prerequisites"
    
    local errors=0
    
    # Check if SSH setup is complete
    if [[ ! -f "$HOME/.ssh/id_ed25519-cert.pub" ]]; then
        log_error "SSH certificate not found"
        echo "  Run: ~/.local/bin/setup_ssh"
        errors=$((errors + 1))
    else
        log_info "‚úì SSH certificate found"
    fi
    
    # Check if SSH service is running
    if ! sudo launchctl list | grep -q ssh 2>/dev/null; then
        log_error "SSH service not running"
        echo "  Run: sudo systemsetup -setremotelogin on"
        errors=$((errors + 1))
    else
        log_info "‚úì SSH service is running"
    fi
    
    # Check network connectivity
    local ip=$(ifconfig | grep "inet " | grep -v "127.0.0.1" | head -1 | awk '{print $2}')
    if [[ -z "$ip" ]]; then
        log_error "No network connection detected"
        errors=$((errors + 1))
    else
        log_info "‚úì Network connection: $ip"
    fi
    
    # Check if Zellij is working
    if ! command -v zellij &> /dev/null; then
        log_error "Zellij not found"
        errors=$((errors + 1))
    else
        log_info "‚úì Zellij is available"
    fi
    
    if [[ $errors -gt 0 ]]; then
        log_error "$errors prerequisite(s) missing"
        echo ""
        echo "Please resolve the above issues before continuing."
        echo "You can run ~/.local/bin/remote_health_check for detailed diagnostics."
        return 1
    fi
    
    log_info "‚úÖ All prerequisites met!"
    return 0
}

show_overview() {
    log_step "iPhone Terminal Access Setup Overview"
    
    echo "This guide will help you set up secure terminal access from your iPhone to this MacBook."
    echo ""
    echo "What you'll accomplish:"
    echo "  üîê Secure SSH access with certificate authentication"
    echo "  üì± Mobile-optimized terminal experience with Zellij"
    echo "  üîÑ Resilient connections with Mosh"
    echo "  üõ°Ô∏è Enterprise-grade security with rate limiting"
    echo ""
    echo "What you'll need on your iPhone:"
    echo "  üì≤ Terminal app (Termius, Blink Shell, or similar)"
    echo "  üìã QR code scanner or file transfer method"
    echo "  üîë SSH certificate files"
    echo ""
    echo "Time required: ~15 minutes"
    
    wait_for_user
}

generate_certificates() {
    log_step "Preparing Certificates for Mobile Transfer"
    
    log_info "Creating mobile certificate package..."
    
    # Create temporary directory for certificates
    local cert_dir="./iphone_certs_$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$cert_dir"
    
    # Copy necessary files
    if [[ -f "$HOME/.ssh/id_ed25519" ]]; then
        cp "$HOME/.ssh/id_ed25519" "$cert_dir/"
        log_info "‚úì Private key copied"
    fi
    
    if [[ -f "$HOME/.ssh/id_ed25519-cert.pub" ]]; then
        cp "$HOME/.ssh/id_ed25519-cert.pub" "$cert_dir/"
        log_info "‚úì Certificate copied"
    fi
    
    if [[ -f "$HOME/.ssh/ca/ssh_ca.pub" ]]; then
        cp "$HOME/.ssh/ca/ssh_ca.pub" "$cert_dir/"
        log_info "‚úì CA public key copied"
    fi
    
    # Get network information
    local primary_ip=$(ifconfig | grep "inet " | grep -v "127.0.0.1" | head -1 | awk '{print $2}')
    local secondary_ip=$(ifconfig | grep "inet " | grep -v "127.0.0.1" | tail -1 | awk '{print $2}')
    
    # Create setup instructions
    cat > "$cert_dir/SETUP_INSTRUCTIONS.txt" << EOF
iPhone SSH Setup Instructions
=============================

CONNECTION SETTINGS:
- Host: $primary_ip (or $secondary_ip)
- Port: 2222
- Username: $(whoami)
- Authentication: Certificate/Public Key

REQUIRED FILES:
1. id_ed25519 (Private Key)
   - Import this as your SSH private key
   - Keep this file secure and private

2. id_ed25519-cert.pub (User Certificate)  
   - Import this as your SSH certificate
   - Links your private key to the server

3. ssh_ca.pub (CA Public Key)
   - Import for host verification
   - Validates the server's identity

POST-LOGIN COMMAND:
zellij attach main || zellij --session main

MOSH SETTINGS (for better mobile experience):
- Enable Mosh in your SSH client
- UDP Port Range: 60000-61000
- Prediction: Adaptive

RECOMMENDED APPS:
- Termius (Free with in-app purchases)
- Blink Shell (Paid, very good)
- SSH Files (Free alternative)

SECURITY NOTES:
- Never share your private key (id_ed25519)
- Use secure file transfer (AirDrop, encrypted email)
- Delete temporary files after setup
- The certificate expires in ~1 year

For help: ~/.local/bin/troubleshoot_remote
EOF
    
    log_info "‚úÖ Certificate package ready: $cert_dir"
    echo ""
    echo "Certificate files prepared in: $cert_dir"
    echo "  üìÑ Setup instructions included"
    echo "  üîë All necessary certificates copied"
    echo "  üõ°Ô∏è Ready for secure transfer to iPhone"
    
    echo "$cert_dir"
    wait_for_user
}

generate_qr_codes() {
    log_step "Generating QR Codes for Easy Setup"
    
    if ! command -v qrencode &> /dev/null; then
        log_warn "QR code generator not installed"
        echo "Install with: brew install qrencode"
        echo "Skipping QR code generation..."
        return 0
    fi
    
    log_info "Generating QR codes..."
    
    # Generate QR codes using our script
    if ~/.local/bin/generate_qr_config all; then
        log_info "‚úÖ QR codes generated successfully!"
        echo ""
        echo "QR codes created:"
        echo "  üì± ssh_config.png - SSH client configuration"
        echo "  üì± blink_config.png - Blink Shell configuration"
        echo "  üì± termius_config.png - Termius configuration"
        echo "  üì± connection_info.png - Connection details"
        echo ""
        echo "Use these QR codes to quickly configure your SSH client!"
    else
        log_warn "QR code generation failed"
    fi
    
    wait_for_user
}

show_termius_setup() {
    log_step "Termius App Setup Instructions"
    
    echo "Termius is a popular SSH client with good certificate support."
    echo ""
    echo "üì± TERMIUS SETUP STEPS:"
    echo ""
    echo "1. Install Termius from App Store"
    echo ""
    echo "2. Import SSH Key:"
    echo "   - Tap '+' ‚Üí SSH Key"
    echo "   - Paste or import your private key (id_ed25519)"
    echo "   - Give it a name like 'MacBook Key'"
    echo ""
    echo "3. Import Certificate:"
    echo "   - In SSH Keys section"
    echo "   - Import the certificate file (id_ed25519-cert.pub)"
    echo "   - Associate it with your private key"
    echo ""
    echo "4. Create Host Connection:"
    echo "   - Tap '+' ‚Üí Host"
    echo "   - Address: $(ifconfig | grep "inet " | grep -v "127.0.0.1" | head -1 | awk '{print $2}')"
    echo "   - Port: 2222"
    echo "   - Username: $(whoami)"
    echo "   - Key: Select your imported key + certificate"
    echo ""
    echo "5. Configure Advanced Settings:"
    echo "   - Enable Mosh (if available)"
    echo "   - Post-login command: zellij attach main || zellij --session main"
    echo "   - Terminal: xterm-256color"
    echo ""
    echo "6. Test Connection:"
    echo "   - Tap your host to connect"
    echo "   - Should auto-launch Zellij session"
    
    wait_for_user
}

show_blink_setup() {
    log_step "Blink Shell Setup Instructions"
    
    echo "Blink Shell is a premium SSH client with excellent terminal features."
    echo ""
    echo "üì± BLINK SHELL SETUP STEPS:"
    echo ""
    echo "1. Install Blink Shell from App Store"
    echo ""
    echo "2. Import SSH Key:"
    echo "   - Settings ‚Üí Keys"
    echo "   - Import private key (id_ed25519)"
    echo "   - Import certificate (id_ed25519-cert.pub)"
    echo ""
    echo "3. Configure Host:"
    echo "   - Settings ‚Üí Hosts"
    echo "   - Add new host:"
    echo "     hostname = \"$(ifconfig | grep "inet " | grep -v "127.0.0.1" | head -1 | awk '{print $2}')\""
    echo "     port = 2222"
    echo "     user = \"$(whoami)\""
    echo "     identityFile = \"id_ed25519\""
    echo "     certificateFile = \"id_ed25519-cert.pub\""
    echo ""
    echo "4. Enable Mosh:"
    echo "     moshServer = \"/usr/local/bin/mosh-server\""
    echo "     moshPort = \"60000:61000\""
    echo ""
    echo "5. Auto-launch Zellij:"
    echo "     remoteCommand = \"zellij attach main || zellij --session main\""
    echo ""
    echo "6. Test Connection:"
    echo "   - Type: ssh macbook"
    echo "   - Should connect and launch Zellij"
    
    wait_for_user
}

show_security_tips() {
    log_step "Security Best Practices"
    
    echo "üõ°Ô∏è SECURITY RECOMMENDATIONS:"
    echo ""
    echo "üì± Mobile Device Security:"
    echo "  ‚Ä¢ Use a strong passcode/biometric lock"
    echo "  ‚Ä¢ Enable automatic lock (1-2 minutes)"
    echo "  ‚Ä¢ Don't store SSH keys in insecure apps"
    echo "  ‚Ä¢ Use reputable SSH client apps only"
    echo ""
    echo "üîë Certificate Security:"
    echo "  ‚Ä¢ Never share your private key"
    echo "  ‚Ä¢ Use secure transfer methods (AirDrop, encrypted email)"
    echo "  ‚Ä¢ Delete temporary certificate files after setup"
    echo "  ‚Ä¢ Rotate certificates annually"
    echo ""
    echo "üåê Network Security:"
    echo "  ‚Ä¢ Prefer trusted WiFi networks"
    echo "  ‚Ä¢ Avoid public WiFi for SSH when possible"
    echo "  ‚Ä¢ Mosh provides some protection over unreliable networks"
    echo "  ‚Ä¢ Monitor failed login attempts"
    echo ""
    echo "üè† Home Network Security:"
    echo "  ‚Ä¢ Keep your router firmware updated"
    echo "  ‚Ä¢ Use strong WiFi passwords (WPA3)"
    echo "  ‚Ä¢ Consider network isolation for IoT devices"
    echo "  ‚Ä¢ Monitor connected devices regularly"
    echo ""
    echo "üìä Monitoring:"
    echo "  ‚Ä¢ Run ~/.local/bin/remote_health_check regularly"
    echo "  ‚Ä¢ Check ~/.local/bin/setup_firewall blocked for blocked IPs"
    echo "  ‚Ä¢ Review SSH logs periodically"
    
    wait_for_user
}

show_troubleshooting() {
    log_step "Common Issues & Troubleshooting"
    
    echo "üîß TROUBLESHOOTING GUIDE:"
    echo ""
    echo "‚ùå Connection Refused:"
    echo "  ‚Ä¢ Check if SSH service is running: sudo launchctl list | grep ssh"
    echo "  ‚Ä¢ Verify port 2222 is listening: lsof -i :2222"
    echo "  ‚Ä¢ Check firewall settings: ~/.local/bin/setup_firewall status"
    echo ""
    echo "üîê Authentication Failed:"
    echo "  ‚Ä¢ Verify certificate validity: ~/.local/bin/cert_status"
    echo "  ‚Ä¢ Check certificate expiry: ~/.local/bin/renew_ssh_cert status"
    echo "  ‚Ä¢ Test local connection: ssh -p 2222 localhost"
    echo ""
    echo "üì± Mobile App Issues:"
    echo "  ‚Ä¢ Ensure private key and certificate are both imported"
    echo "  ‚Ä¢ Check file permissions (certificate apps may be picky)"
    echo "  ‚Ä¢ Try different authentication methods if available"
    echo "  ‚Ä¢ Clear app data and re-import keys if needed"
    echo ""
    echo "üåê Network Issues:"
    echo "  ‚Ä¢ Verify MacBook and iPhone are on same network"
    echo "  ‚Ä¢ Check IP address hasn't changed: ifconfig"
    echo "  ‚Ä¢ Test local connectivity: ping [macbook-ip]"
    echo "  ‚Ä¢ Try alternative IP if multiple available"
    echo ""
    echo "‚ö° Performance Issues:"
    echo "  ‚Ä¢ Enable Mosh for better mobile experience"
    echo "  ‚Ä¢ Reduce Zellij session complexity"
    echo "  ‚Ä¢ Check network quality and latency"
    echo ""
    echo "üõ†Ô∏è HELPFUL COMMANDS:"
    echo "  ~/.local/bin/remote_health_check    - Complete system check"
    echo "  ~/.local/bin/connection_test        - Test all connections"
    echo "  ~/.local/bin/cert_status           - Certificate status"
    echo "  ~/.local/bin/setup_firewall status - Security status"
    echo "  ~/.local/bin/troubleshoot_remote   - Advanced troubleshooting"
    
    wait_for_user
}

show_next_steps() {
    log_step "Next Steps & Additional Features"
    
    echo "üéâ Congratulations! Your iPhone terminal access is set up."
    echo ""
    echo "üöÄ WHAT YOU CAN DO NOW:"
    echo ""
    echo "üì± Basic Usage:"
    echo "  ‚Ä¢ Connect from iPhone SSH client"
    echo "  ‚Ä¢ Access Zellij terminal multiplexer"
    echo "  ‚Ä¢ Run commands, edit files, manage projects"
    echo "  ‚Ä¢ Switch between terminal tabs and panes"
    echo ""
    echo "‚ö° Advanced Features:"
    echo "  ‚Ä¢ Development session: zellij attach dev"
    echo "  ‚Ä¢ Monitoring session: zellij attach monitor"
    echo "  ‚Ä¢ Docker integration: ~/.local/bin/session_docker"
    echo "  ‚Ä¢ Kubernetes integration: ~/.local/bin/session_kubernetes"
    echo ""
    echo "üîß Maintenance:"
    echo "  ‚Ä¢ Health checks: ~/.local/bin/remote_health_check"
    echo "  ‚Ä¢ Certificate renewal: ~/.local/bin/renew_ssh_cert check"
    echo "  ‚Ä¢ Security monitoring: ~/.local/bin/setup_firewall status"
    echo ""
    echo "üìö Additional Setup:"
    echo "  ‚Ä¢ WireGuard VPN: Follow doc/remote_access.md Phase 8"
    echo "  ‚Ä¢ SOPS encryption: ~/.local/bin/setup_security"
    echo "  ‚Ä¢ Custom Zellij layouts: ~/.config/zellij/layouts/"
    echo ""
    echo "üÜò Need Help?"
    echo "  ‚Ä¢ Troubleshooting: ~/.local/bin/troubleshoot_remote"
    echo "  ‚Ä¢ Documentation: ~/.file/doc/remote_access.md"
    echo "  ‚Ä¢ Health check: ~/.local/bin/remote_health_check"
    echo ""
    echo "Enjoy your mobile terminal access! üéØ"
}

run_interactive_guide() {
    clear
    
    echo -e "${MAGENTA}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                 iPhone Terminal Access Setup                 ‚ïë"
    echo "‚ïë                     Interactive Guide                        ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
    
    wait_for_user
    
    # Check prerequisites first
    if ! check_prerequisites; then
        log_error "Prerequisites not met. Please resolve issues and run again."
        exit 1
    fi
    
    # Run through the setup process
    show_overview
    
    local cert_dir
    cert_dir=$(generate_certificates)
    
    generate_qr_codes
    
    show_termius_setup
    
    show_blink_setup
    
    show_security_tips
    
    show_troubleshooting
    
    show_next_steps
    
    echo ""
    log_info "Setup guide completed!"
    log_info "Certificate package: $cert_dir"
    log_info "QR codes: $(pwd)/*.png"
    
    echo ""
    echo "Remember to:"
    echo "  üîí Transfer certificates securely to your iPhone"
    echo "  üì± Configure your SSH client app"
    echo "  üß™ Test the connection"
    echo "  üóëÔ∏è Clean up temporary files when done"
}

show_help() {
    echo "iPhone Setup Guide"
    echo ""
    echo "Usage: $0 [command]"
    echo ""
    echo "Commands:"
    echo "  interactive  - Run interactive setup guide (default)"
    echo "  certs        - Generate certificate package only"
    echo "  qr           - Generate QR codes only"
    echo "  termius      - Show Termius setup instructions"
    echo "  blink        - Show Blink Shell setup instructions"
    echo "  security     - Show security best practices"
    echo "  troubleshoot - Show troubleshooting guide"
    echo "  help         - Show this help"
    echo ""
    echo "Examples:"
    echo "  $0              # Run full interactive guide"
    echo "  $0 certs        # Generate certificates only"
    echo "  $0 termius      # Show Termius setup steps"
}

main() {
    case "${1:-interactive}" in
        "interactive")
            run_interactive_guide
            ;;
        "certs")
            generate_certificates
            ;;
        "qr")
            generate_qr_codes
            ;;
        "termius")
            show_termius_setup
            ;;
        "blink")
            show_blink_setup
            ;;
        "security")
            show_security_tips
            ;;
        "troubleshoot")
            show_troubleshooting
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            log_error "Unknown command: $1"
            show_help
            exit 1
            ;;
    esac
}

main "$@"