#!/bin/bash
# Security Enhancement Setup Script
# Configures SSHGuard, SOPS, and firewall for secure remote access

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

check_dependencies() {
    log_info "Checking security tool dependencies..."
    
    local missing_tools=()
    
    if ! command -v sshguard &> /dev/null; then
        missing_tools+=("sshguard")
    fi
    
    if ! command -v sops &> /dev/null; then
        missing_tools+=("sops")
    fi
    
    if ! command -v age &> /dev/null; then
        missing_tools+=("age")
    fi
    
    if [ ${#missing_tools[@]} -gt 0 ]; then
        log_error "Missing required tools: ${missing_tools[*]}"
        log_info "Install with: brew install ${missing_tools[*]}"
        return 1
    fi
    
    log_info "All security tools are available"
    return 0
}

setup_sshguard() {
    log_info "Setting up SSHGuard..."
    
    # Copy configuration
    sudo cp "$HOME/.file/.config/sshguard/sshguard.conf" /usr/local/etc/sshguard.conf
    
    # Create whitelist file
    sudo tee /usr/local/etc/sshguard.whitelist > /dev/null << 'EOF'
# SSHGuard whitelist - trusted IP addresses
127.0.0.0/8
10.0.0.0/8
192.168.0.0/16
172.16.0.0/12
EOF
    
    log_info "SSHGuard configuration installed"
}

setup_sops() {
    log_info "Setting up SOPS encryption..."
    
    # Create SOPS directories
    mkdir -p "$HOME/.config/sops/age"
    mkdir -p "$HOME/.config/secure"
    
    # Generate age key if it doesn't exist
    if [[ ! -f "$HOME/.config/sops/age/keys.txt" ]]; then
        log_info "Generating age encryption key..."
        age-keygen -o "$HOME/.config/sops/age/keys.txt"
        chmod 600 "$HOME/.config/sops/age/keys.txt"
    fi
    
    # Get public key and update SOPS config
    local age_public_key=$(grep "public key:" "$HOME/.config/sops/age/keys.txt" | cut -d' ' -f4)
    
    if [[ -n "$age_public_key" ]]; then
        # Update SOPS config with actual public key
        cp "$HOME/.file/.config/sops/config.yaml" "$HOME/.config/sops/config.yaml"
        sed -i.bak "s/AGE_PUBLIC_KEY_PLACEHOLDER/$age_public_key/g" "$HOME/.config/sops/config.yaml"
        
        # Also update the .sops.yaml file in home directory
        cp "$HOME/.config/sops/config.yaml" "$HOME/.sops.yaml"
        
        log_info "SOPS configuration updated with age public key"
    else
        log_error "Unable to extract age public key"
        return 1
    fi
    
    # Set environment variable
    export SOPS_AGE_KEY_FILE="$HOME/.config/sops/age/keys.txt"
    
    log_info "SOPS encryption setup complete"
}

setup_firewall() {
    log_info "Setting up pf firewall rules..."
    
    # Copy firewall rules
    sudo cp "$HOME/.file/etc/pf.anchors/ssh_rate_limit" /etc/pf.anchors/ssh_rate_limit
    
    # Check if anchor is already in pf.conf
    if ! sudo grep -q "anchor \"ssh-rate-limit\"" /etc/pf.conf; then
        log_info "Adding SSH rate limiting anchor to pf.conf..."
        sudo tee -a /etc/pf.conf > /dev/null << 'EOF'

# SSH rate limiting anchor
anchor "ssh-rate-limit"
load anchor "ssh-rate-limit" from "/etc/pf.anchors/ssh_rate_limit"
EOF
    else
        log_info "SSH rate limiting anchor already exists in pf.conf"
    fi
    
    log_info "Firewall rules installed"
}

create_secure_config_script() {
    log_info "Creating secure configuration management script..."
    
    cat > "$HOME/.local/bin/secure_config" << 'EOF'
#!/bin/bash
# Secure Configuration Management with SOPS
# Manages encrypted configuration files

SOPS_AGE_KEY_FILE="${SOPS_AGE_KEY_FILE:-$HOME/.config/sops/age/keys.txt}"
CONFIG_DIR="${HOME}/.config/secure"
mkdir -p "$CONFIG_DIR"

case "$1" in
    encrypt)
        if [[ -z "$2" ]]; then
            echo "Usage: $0 encrypt <file>"
            exit 1
        fi
        
        if [[ "$2" == *.yaml ]] || [[ "$2" == *.yml ]]; then
            sops -e "$2" > "$CONFIG_DIR/$(basename "$2" .yaml).enc.yaml"
        elif [[ "$2" == *.json ]]; then
            sops -e "$2" > "$CONFIG_DIR/$(basename "$2" .json).enc.json"
        elif [[ "$2" == *.kdl ]]; then
            sops -e "$2" > "$CONFIG_DIR/$(basename "$2" .kdl).enc.kdl"
        else
            sops -e "$2" > "$CONFIG_DIR/$(basename "$2").enc"
        fi
        echo "Encrypted to $CONFIG_DIR/"
        ;;
    decrypt)
        if [[ -z "$2" ]]; then
            echo "Usage: $0 decrypt <encrypted_file>"
            exit 1
        fi
        sops -d "$CONFIG_DIR/$2"
        ;;
    edit)
        if [[ -z "$2" ]]; then
            echo "Usage: $0 edit <encrypted_file>"
            exit 1
        fi
        sops "$CONFIG_DIR/$2"
        ;;
    view)
        if [[ -z "$2" ]]; then
            echo "Usage: $0 view <encrypted_file>"
            exit 1
        fi
        sops -d "$CONFIG_DIR/$2" | less
        ;;
    list)
        ls -la "$CONFIG_DIR"/*.enc* 2>/dev/null || echo "No encrypted files found"
        ;;
    *)
        echo "Usage: $0 {encrypt|decrypt|edit|view|list} [file]"
        echo "Examples:"
        echo "  $0 encrypt config.yaml    # Creates config.enc.yaml"
        echo "  $0 edit config.enc.yaml   # Edit encrypted file"
        echo "  $0 decrypt config.enc.yaml # Decrypt to stdout"
        echo "  $0 view config.enc.yaml   # View decrypted content"
        echo "  $0 list                   # List encrypted files"
        ;;
esac
EOF
    
    chmod +x "$HOME/.local/bin/secure_config"
    log_info "Secure config script created"
}

enable_services() {
    log_info "Enabling security services..."
    
    # Start SSHGuard
    if brew services list | grep -q "sshguard.*stopped"; then
        log_info "Starting SSHGuard service..."
        brew services start sshguard
    else
        log_info "SSHGuard service already running"
    fi
    
    # Enable pf firewall
    if ! sudo pfctl -s info 2>/dev/null | grep -q "Status: Enabled"; then
        log_info "Enabling pf firewall..."
        sudo pfctl -e -f /etc/pf.conf
    else
        log_info "pf firewall already enabled"
    fi
    
    log_info "Security services enabled"
}

verify_setup() {
    log_info "Verifying security setup..."
    
    # Check SSHGuard
    if pgrep sshguard > /dev/null; then
        log_info "✓ SSHGuard is running"
    else
        log_warn "✗ SSHGuard is not running"
    fi
    
    # Check pf firewall
    if sudo pfctl -s info 2>/dev/null | grep -q "Status: Enabled"; then
        log_info "✓ pf firewall is enabled"
    else
        log_warn "✗ pf firewall is not enabled"
    fi
    
    # Check SOPS
    if [[ -f "$HOME/.config/sops/age/keys.txt" ]]; then
        log_info "✓ SOPS encryption key exists"
    else
        log_warn "✗ SOPS encryption key missing"
    fi
    
    # Check SSH rate limit table
    if sudo pfctl -t ssh_bruteforce -T show 2>/dev/null | grep -q "Table does not exist" || \
       sudo pfctl -t ssh_bruteforce -T show 2>/dev/null | wc -l | grep -q "0"; then
        log_info "✓ SSH brute force table is empty (no blocked IPs)"
    else
        local blocked_count=$(sudo pfctl -t ssh_bruteforce -T show 2>/dev/null | wc -l)
        log_warn "SSH brute force table has $blocked_count blocked IPs"
    fi
}

main() {
    log_info "Starting security enhancement setup..."
    
    check_dependencies || exit 1
    
    setup_sshguard
    setup_sops
    setup_firewall
    create_secure_config_script
    enable_services
    
    log_info "Waiting for services to start..."
    sleep 3
    
    verify_setup
    
    log_info "Security enhancement setup complete!"
    log_info ""
    log_info "Security features enabled:"
    log_info "- SSHGuard: Brute-force protection"
    log_info "- SOPS: Encrypted configuration management"
    log_info "- pf: Firewall with rate limiting"
    log_info ""
    log_info "Tools available:"
    log_info "- secure_config: Manage encrypted files"
    log_info "- ~/.local/bin/setup_firewall: Manage firewall rules"
    log_info ""
    log_info "Environment variables:"
    echo "export SOPS_AGE_KEY_FILE=\"$HOME/.config/sops/age/keys.txt\""
}

main "$@"